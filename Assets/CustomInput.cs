//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""MenuSystem"",
            ""id"": ""938b134b-e15a-4346-8b52-b77f06429cd4"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""ece85ec8-17d4-4790-b742-fba54eb77a26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1ccbed6-d564-45b7-a1e4-9eec73386acf"",
                    ""path"": ""<OculusTouchController>/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d837ba1e-641d-4efe-b4ee-1d696f3d51c1"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuSystem
        m_MenuSystem = asset.FindActionMap("MenuSystem", throwIfNotFound: true);
        m_MenuSystem_Menu = m_MenuSystem.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuSystem
    private readonly InputActionMap m_MenuSystem;
    private List<IMenuSystemActions> m_MenuSystemActionsCallbackInterfaces = new List<IMenuSystemActions>();
    private readonly InputAction m_MenuSystem_Menu;
    public struct MenuSystemActions
    {
        private @CustomInput m_Wrapper;
        public MenuSystemActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menu => m_Wrapper.m_MenuSystem_Menu;
        public InputActionMap Get() { return m_Wrapper.m_MenuSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuSystemActions set) { return set.Get(); }
        public void AddCallbacks(IMenuSystemActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuSystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuSystemActionsCallbackInterfaces.Add(instance);
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IMenuSystemActions instance)
        {
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IMenuSystemActions instance)
        {
            if (m_Wrapper.m_MenuSystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuSystemActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuSystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuSystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuSystemActions @MenuSystem => new MenuSystemActions(this);
    public interface IMenuSystemActions
    {
        void OnMenu(InputAction.CallbackContext context);
    }
}
